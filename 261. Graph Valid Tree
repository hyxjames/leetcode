class Solution {
public:
    class UnionFind{
        public:
        vector<int> nodes;
        int clusterNum;
        
        UnionFind(int N){
            for(int i=0;i<N;i++){
                nodes.push_back(i);
            }
            clusterNum = N;
        }
        
        int findParent(int n){
            while(n != nodes[n]) n = nodes[n];
            return n;
        }
        
        void un(int n1, int n2){
            int p1 = findParent(n1);
            int p2 = findParent(n2);
            if(p1 != p2){
                nodes[p1] = p2;
                clusterNum--;
            }
        }
        
        bool find(int n1, int n2){
            int p1 = findParent(n1);
            int p2 = findParent(n2);
            return p1==p2;
        }
    };
    
    bool validTree(int n, vector<pair<int, int>>& edges) {
        UnionFind unionfind(n);
        for(int i=0;i<edges.size();i++){
            if(unionfind.find(edges[i].first, edges[i].second)){
                return false;
            } else{
                unionfind.un(edges[i].first, edges[i].second);
            }
        }
        return unionfind.clusterNum==1;
    }
};
