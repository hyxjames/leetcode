class Solution {
public:
    class Point{
        public:
        int x;
        int y;
        int val;
        Point(int x, int y, int val){
            this->x = x;
            this->y = y;
            this->val = val;
        }
    };
    
    class MyComparison{
        public:
        bool operator()(Point& p1, Point& p2){
            return p1.val>p2.val;
        }
    };
    
    int swimInWater(vector<vector<int>>& grid) {
        int res = 0;
        priority_queue<Point, vector<Point>, MyComparison> q;
        q.push(Point(0,0,grid[0][0]));
        grid[0][0] = -1;
        while(!q.empty()){
            Point p = q.top();
            q.pop();
            int x = p.x;
            int y = p.y;
            res = max(res, p.val);
            if(p.y==grid.size()-1 && p.x==grid[0].size()-1) break;
            if(p.x>0 && grid[y][x-1]>=0){
                q.push(Point(x-1,y,grid[y][x-1]));
                grid[y][x-1] = -1;
            }
            if(p.x<grid[0].size()-1 && grid[y][x+1]>=0){
                q.push(Point(x+1,y,grid[y][x+1]));
                grid[y][x+1] = -1;
            }
            if(p.y>0 && grid[y-1][x]>=0){
                q.push(Point(x,y-1,grid[y-1][x]));
                grid[y-1][x] = -1;
            }
            if(p.y<grid.size()-1 && grid[y+1][x]>=0){
                q.push(Point(x,y+1,grid[y+1][x]));
                grid[y+1][x] = -1;
            }
        }
        return res;
    }
};
