class Node{
    public:
    char val;
    unordered_map<char, Node*> children;
    Node(char val){
        this->val = val;
    }
};

class WordDictionary {
public:
    /** Initialize your data structure here. */
    Node* root;
    WordDictionary() {
        root = new Node('#');
    }
    
    /** Adds a word into the data structure. */
    void addWord(string word) {
        Node* curNode = root;
        for(int i=0;i<word.size();i++){
            if(curNode->children.find(word[i]) == curNode->children.end()){
                Node* n = new Node(word[i]);
                curNode->children[word[i]] = n;
                curNode = n;
            } else{
                curNode = curNode->children[word[i]];
            }
        }
        curNode->children['#'] = NULL;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    bool search(string word) {
        return searchHelper(word, 0, root);
    }
    
    bool searchHelper(string& word, int pos, Node* node){
        bool res = false;
        if(pos == word.size()){
            if(node->children.find('#')!=node->children.end()) res = true;
            else res = false;
        } else{
            if(word[pos]=='.'){
                for(auto it=node->children.begin();it!=node->children.end();it++){
                    if(it->first != '#')
                        res = res || searchHelper(word, pos+1, it->second);
                    if(res) break;
                }
            } else{
                if(node->children.find(word[pos]) != node->children.end()){
                    res = searchHelper(word, pos+1, node->children[word[pos]]);
                }
            }
        }
        return res;
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * bool param_2 = obj.search(word);
 */
