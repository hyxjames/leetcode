/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if(n==0){
            vector<TreeNode*> v;
            return v;
        }
        return helper(1,n);
    }
    
    vector<TreeNode*> helper(int begin, int end){
        vector<TreeNode*> result;
        if(begin == end){
            TreeNode* t = new TreeNode(begin);
            result.push_back(t);
        } else if(end > begin){
            for(int i=begin;i<=end;i++){
                vector<TreeNode*> left = helper(begin, i-1);
                vector<TreeNode*> right = helper(i+1, end);
                for(int j=0;j<left.size();j++){
                    for(int k=0;k<right.size();k++){
                        TreeNode* t = new TreeNode(i);
                        t->left = left[j];
                        t->right = right[k];
                        result.push_back(t);
                    }
                }
            }
        } else{
            result.push_back(NULL);
        }
        return result;
    }
};
