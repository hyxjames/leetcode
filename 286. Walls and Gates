class Solution {
public:
    void wallsAndGates(vector<vector<int>>& rooms) {
        if(rooms.size()==0) return;
        
        queue<pair<int,int>> q;
        for(int i=0;i<rooms.size();i++){
            for(int j=0;j<rooms[i].size();j++){
                if(rooms[i][j] == 0){
                    q.push(make_pair(i, j));
                }
            }
        }
        
        int size = q.size();
        int dist = 1;
        int dx[4] = {1,-1,0,0};
        int dy[4] = {0,0,1,-1};
        
        while(!q.empty()){
            pair<int,int> pos = q.front();
            q.pop();
            size--;
            for(int i=0;i<4;i++){
                int y = pos.first+dy[i];
                int x = pos.second+dx[i];
                if(x>=0 && y>=0 && y<rooms.size() && x<rooms[0].size()){
                    if(rooms[y][x] == INT_MAX){
                        rooms[y][x] = dist;
                        q.push(make_pair(y,x));
                    }
                }
            }
            if(size==0){
                size = q.size();
                dist++;
            }
        }
        
        return;
    }
};
