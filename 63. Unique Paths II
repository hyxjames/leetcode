int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        for(int i=0;i<obstacleGrid.size();i++){
            for(int j=0;j<obstacleGrid[0].size();j++){
                if(obstacleGrid[i][j] == 1){
                    obstacleGrid[i][j] = -1;
                }
            }
        }
        if(obstacleGrid[0][0] == -1 || obstacleGrid[obstacleGrid.size()-1][obstacleGrid[0].size()-1] == -1){
            return 0;
        }
        obstacleGrid[0][0] = 1;
        for(int i=0;i<obstacleGrid.size();i++){
            for(int j=0;j<obstacleGrid[0].size();j++){
                if(i == 0 && j==0){
                    ;
                } else if(i == 0){
                    if(obstacleGrid[i][j] == -1){
                        continue;
                    } else{
                        obstacleGrid[i][j] = obstacleGrid[i][j-1];
                    }
                } else if(j == 0){
                    if(obstacleGrid[i][j] == -1){
                        continue;
                    } else{
                        obstacleGrid[i][j] = obstacleGrid[i-1][j];
                    }
                } else{
                    if(obstacleGrid[i][j] == -1){
                        continue;
                    } else if(obstacleGrid[i-1][j] == -1 && obstacleGrid[i][j-1] == -1){
                        obstacleGrid[i][j] = -1;
                    } else if(obstacleGrid[i-1][j] == -1){
                        obstacleGrid[i][j] = obstacleGrid[i][j-1];
                    } else if(obstacleGrid[i][j-1] == -1){
                        obstacleGrid[i][j] = obstacleGrid[i-1][j];
                    } else{
                        obstacleGrid[i][j] = obstacleGrid[i][j-1]+obstacleGrid[i-1][j];
                    }
                }
            }
        }
        return obstacleGrid[obstacleGrid.size()-1][obstacleGrid[0].size()-1]<0?0:obstacleGrid[obstacleGrid.size()-1][obstacleGrid[0].size()-1];
