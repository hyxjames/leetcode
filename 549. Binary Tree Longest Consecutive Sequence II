/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int longestConsecutive(TreeNode* root) {
        if(root==NULL){
            return 0;
        }
        int result = 0;
        helper(root, result);
        return result;
    }
    
    vector<int> helper(TreeNode* root, int& res){
        vector<int> vec;
        if(root->left==NULL && root->right==NULL){
            res = max(res, 1);
            vec.push_back(1);
            vec.push_back(1);
        } else if(root->left == NULL){
            vector<int> v = helper(root->right, res);
            if(root->val == root->right->val-1){
                res = max(res, v[0]+1);
                vec.push_back(v[0]+1);
                vec.push_back(1);
            } else if(root->val == root->right->val+1){
                res = max(res, v[1]+1);
                vec.push_back(1);
                vec.push_back(v[1]+1);
            } else{
                vec.push_back(1);
                vec.push_back(1);
            }
        } else if(root->right == NULL){
            vector<int> v = helper(root->left, res);
            if(root->val == root->left->val-1){
                res = max(res, v[0]+1);
                vec.push_back(v[0]+1);
                vec.push_back(1);
            } else if(root->val == root->left->val+1){
                res = max(res, v[1]+1);
                vec.push_back(1);
                vec.push_back(v[1]+1);
            } else{
                vec.push_back(1);
                vec.push_back(1);
            }
        } else{
            vector<int> l = helper(root->left, res);
            vector<int> r = helper(root->right, res);
            if(root->val==root->left->val-1){
                if(root->val==root->right->val+1){
                    res = max(res, l[0]+r[1]+1);
                    vec.push_back(l[0]+1);
                    vec.push_back(r[1]+1);
                } else if(root->val == root->right->val-1){
                    res = max(res, max(l[0]+1, r[0]+1));
                    vec.push_back(max(l[0]+1, r[0]+1));
                    vec.push_back(1);
                } else{
                    res = max(res, l[0]+1);
                    vec.push_back(l[0]+1);
                    vec.push_back(1);
                }
            } else if(root->val==root->left->val+1){
                if(root->val==root->right->val-1){
                    res = max(res, l[1]+r[0]+1);
                    vec.push_back(r[0]+1);
                    vec.push_back(l[1]+1);
                } else if(root->val == root->right->val+1){
                    res = max(res, max(l[1]+1, r[1]+1));
                    vec.push_back(1);
                    vec.push_back(max(l[1]+1, r[1]+1));
                } else{
                    res = max(res, l[1]+1);
                    vec.push_back(1);
                    vec.push_back(l[1]+1);
                }
            } else{
                if(root->val==root->right->val-1){
                    res = max(res, r[0]+1);
                    vec.push_back(r[0]+1);
                    vec.push_back(1);
                } else if(root->val == root->right->val+1){
                    res = max(res, r[1]+1);
                    vec.push_back(1);
                    vec.push_back(r[1]+1);
                } else{
                    res = max(res, 1);
                    vec.push_back(1);
                    vec.push_back(1);
                }
            }
        }
        return vec;
    }
};
