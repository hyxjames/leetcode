class Solution {
public:
    string left = "left";
    string right = "right";
    string up = "up";
    string down = "down";
    string directions[4] = {left, right, up, down};
    
    bool hasPath(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {
        unordered_set<string> visited;
        unordered_map<string, bool> memo;
        pair<int,int> startPair = make_pair(start[0], start[1]);
        pair<int,int> destPair = make_pair(destination[0], destination[1]);
        return dfs(maze, startPair, destPair, visited, memo);
    }
    
    bool dfs(vector<vector<int>>& maze, pair<int,int>& start, pair<int,int>& destination, unordered_set<string>& visited,                                unordered_map<string,bool>& memo){
        string key = pair2Str(start);
        visited.insert(key);
        if(memo.find(key) != memo.end()) return memo[key];
        if(start == destination){
            memo[key] = true;
            return true;
        }
        bool result = false;
        for(int i=0;i<4;i++){
            pair<int,int> nextPos = getNextPos(start, directions[i], maze);
            string nextKey = pair2Str(nextPos);
            if(visited.find(nextKey) == visited.end()){
                result |= dfs(maze, nextPos, destination, visited, memo);
            }
        }
        memo[key] = result;
        return result;
    }
    
    pair<int,int> getNextPos(pair<int,int>& pos, string& direction, vector<vector<int>>& maze){
        int y = pos.first;
        int x = pos.second;
        if(direction == left){
            while(x>0 && maze[y][x-1]==0) x = x-1;
        } else if(direction == right){
            while(x<maze[0].size()-1 && maze[y][x+1]==0) x = x+1;
        } else if(direction == up){
            while(y>0 && maze[y-1][x]==0) y = y-1;
        } else if(direction == down){
            while(y<maze.size()-1 && maze[y+1][x]==0) y = y+1;
        }
        return make_pair(y,x);
    }
    
    string pair2Str(pair<int,int>& p){
        string str = "";
        str.append(to_string(p.first));
        str.push_back(',');
        str.append(to_string(p.second));
        return str;
    }
};
