class Solution {
public:
    class Node{
        public:
        string val;
        multiset<string> children;
        
        Node(string val){
            this->val = val;
        }
    };
    
    vector<string> findItinerary(vector<pair<string, string>> tickets) {
        unordered_map<string, Node*> nodes;
        for(int i=0;i<tickets.size();i++){
            if(nodes.find(tickets[i].first) == nodes.end()){
                Node* n = new Node(tickets[i].first);
                nodes[tickets[i].first] = n;
            }
            if(nodes.find(tickets[i].second) == nodes.end()){
                Node* n = new Node(tickets[i].second);
                nodes[tickets[i].second] = n;
            }
            nodes[tickets[i].first]->children.insert(tickets[i].second);
        }
        vector<string> result;
        dfs("JFK", result, nodes);
        reverse(result.begin(), result.end());
        return result;
    }
    
    void dfs(string source, vector<string>& result, unordered_map<string,Node*>& nodes){
       // cout<<source<<endl;
        Node* node = nodes[source];
        while(!node->children.empty()){
            string dest = *(node->children.begin());
            node->children.erase(node->children.begin());
            dfs(dest, result, nodes);
        }
        result.push_back(source);
    }
};
