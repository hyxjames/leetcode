class Solution {
public:
    int minMutation(string start, string end, vector<string>& bank) {
        unordered_set<string> visited;
        int level = 0;
        int size = 1;
        queue<string> q;
        q.push(start);
        visited.insert(start);
        while(!q.empty()){
            string st = q.front();
            if(st==end) return level;
            q.pop();
            size--;
            for(int i=0;i<bank.size();i++){
                if(visited.find(bank[i]) == visited.end() && isMutateOne(st, bank[i])){
                    q.push(bank[i]);
                    visited.insert(bank[i]);
                }
            }
            if(size==0){
                size = q.size();
                level++;
            }
        }
        return -1;
    }
    
    bool isMutateOne(string start, string end){
        int diff = 0;
        for(int i=0;i<start.size();i++){
            if(start[i] != end[i]) diff++;
            if(diff>1) return false;
        }
        return diff<=1;
    }
};
