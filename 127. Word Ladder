class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        queue<string> q;
        int level = 1;
        q.push(beginWord);
        bool hasAns = false;
        int size = 1;
        unordered_set<string> words;
        for(int i=0;i<wordList.size();i++){
            words.insert(wordList[i]);
        }
        words.erase(beginWord);
        while(!q.empty()){
            string word = q.front();
            if(word == endWord) {hasAns=true; break;}
            q.pop();
            size--;
            auto it = words.begin();
            while(it!=words.end()){
                string str = *it;
                //cout<<str<<endl;
                if(isDiff1(word, str)){
                    it++;
                    q.push(str);
                    words.erase(str);
                } else{
                    it++;
                }
            }
            if(size==0){
                level++;
                size = q.size();
            }
        }
        return hasAns?level:0;
    }
    
    bool isDiff1(string str1, string str2){
        int diff = 0;
        if(str1.size() != str2.size()) return false;
        for(int i=0;i<str1.size();i++){
            if(str1[i] != str2[i]){
                diff++;
                if(diff>1) return false;
            }
        }
        return true;
    }
};
