class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> res;
        dfs(result, res, nums);
        return result;
    }
    
    void dfs(vector<vector<int>>& result, vector<int>& res, vector<int>& nums){
        if(nums.size()==0){
            result.push_back(res);
        } else{
            unordered_set<int> visited;
            for(int i=0;i<nums.size();i++){
                if(visited.find(nums[i]) == visited.end()){
                    visited.insert(nums[i]);
                    int val = nums[i];
                    res.push_back(nums[i]);
                    nums.erase(nums.begin()+i);
                    dfs(result, res, nums);
                    res.pop_back();
                    nums.insert(nums.begin()+i, val);
                }
            }
        }
    }
};
