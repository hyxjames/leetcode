class Solution {
public:
    int change(int amount, vector<int>& coins) {
        unordered_map<string,int> memo;
        return dfs(amount, coins, memo, 0);
    }
    
    int dfs(int amount, vector<int>& coins, unordered_map<string, int>& memo, int start){
        string key = generateKey(start, amount);
        if(amount == 0){
            return 1;
        } else{
            if(memo.find(key) != memo.end()) return memo[key];
            int result = 0;
            for(int i=start;i<coins.size();i++){
                if(coins[i] <= amount){
                    result += dfs(amount-coins[i], coins, memo, i);
                }
            }
            memo[key] = result;
            //cout<<key<<": "<<result<<endl;
            return result;
        }
    }
    
    string generateKey(int start, int amount){
        return to_string(start)+","+to_string(amount);
    }
};
