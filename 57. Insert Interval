/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    static bool myComp(Interval i1, Interval i2){
        if(i1.start < i2.start){
            return true;
        } else if(i1.start > i2.start){
            return false;
        } else{
            return i1.end < i2.end;
        }
    }
    
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        if(intervals.size()==0){
            intervals.push_back(newInterval);
            return intervals;
        }
        sort(intervals.begin(), intervals.end(), myComp);
        int i=0;
        for(i=0;i<intervals.size();i++){
            if(newInterval.start > intervals[intervals.size()-1].end){
                intervals.insert(intervals.begin()+i+1, newInterval);
                break;
            }
            if(newInterval.end < intervals[i].start){
                intervals.insert(intervals.begin(),newInterval);
                break;
            } else if(newInterval.end > intervals[i].start){
                if(newInterval.start < intervals[i].start){
                    intervals[i].start = newInterval.start;
                }
                if(newInterval.start > intervals[i].end){
                    continue;
                } else{
                    intervals[i].end = max(newInterval.end, intervals[i].end);
                    while(i<intervals.size()-1 && intervals[i+1].start <= newInterval.end){
                        intervals[i].end = max(newInterval.end, intervals[i+1].end);
                        intervals.erase(intervals.begin()+i+1);
                    }
                    break;
                } 
            } else{
                intervals[i].start = min(intervals[i].start, newInterval.start);
                break;
            }
        }
        sort(intervals.begin(), intervals.end(), myComp);
        return intervals;
    }
};
