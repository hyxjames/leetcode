class Solution {
public:
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        unordered_map<int, vector<vector<int>>> memo;
        return dfs(0, graph.size()-1, graph, memo);
    }
    
    vector<vector<int>> dfs(int src, int target, vector<vector<int>>& graph, unordered_map<int, vector<vector<int>>>& memo){
        if(memo.find(src)!=memo.end()) return memo[src];
        vector<vector<int>> result;
        if(src==target){
            vector<int> vec;
            vec.push_back(target);
            result.push_back(vec);
        } else{
            for(int i=0;i<graph[src].size();i++){
                vector<vector<int>> paths = dfs(graph[src][i], target, graph, memo);
                for(int j=0;j<paths.size();j++){
                    vector<int> vec = paths[j];
                    vec.insert(vec.begin(), src);
                    result.push_back(vec);
                }
            }
        }
        memo[src] = result;
        return result;
    }
};
